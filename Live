<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title></title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.0/jquery.min.js"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.css" rel="stylesheet" />
  <script src="https://npmcdn.com/csv2geojson@latest/csv2geojson.js"></script>
  <script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    /* Popup styling */
    .mapboxgl-popup {
      padding-bottom: 5px;
    }

    .mapboxgl-popup-close-button {
      display: none;
    }

    .mapboxgl-popup-content {
      font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
      padding: 0;
      width: 250px;
    }

    .mapboxgl-popup-content-wrapper {
      padding: 1%;
    }

    .mapboxgl-popup-content h3 {
      background: rgb(61, 59, 59);
      text-align: center;
      color: #fff;
      margin: 0;
      display: block;
      padding: 15px;
      font-weight: 700;
      margin-top: -5px;
    }

    .mapboxgl-popup-content h4 {
      margin: 0;
      display: block;
      padding: 10px 3px 10px 10px;
      font-weight: 400;
    }

    .mapboxgl-container {
      cursor: pointer;
    }

    .mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
      margin-top: 3px;
    }

    .mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
      border-bottom-color: rgb(61, 59, 59);
    }
  </style>
</head>

<body>
  <div id="map"></div>
  <script>
    var transformRequest = (url, resourceType) => {
      var isMapboxRequest =
        url.slice(8, 22) === "api.mapbox.com" ||
        url.slice(10, 26) === "tiles.mapbox.com";
      return {
        url: isMapboxRequest
          ? url.replace("?", "?pluginName=sheetMapper&")
          : url,
      };
    };

    mapboxgl.accessToken = 'pk.eyJ1Ijoibmljb2xhbWF6enVjY2hpIiwiYSI6ImNsaWFnbGdiZDAzZm4za29ieThoNTgzeHcifQ.uYMvqDzOfGAEs_QU2QzzkA'; //Mapbox token
    var map = new mapboxgl.Map({
      container: 'map', // container id
      style: 'mapbox://styles/nicolamazzucchi/cliagrt3k02vo01pn474hh1ba', // YOUR TURN: choose a style: https://docs.mapbox.com/api/maps/#styles
      center: [-8.736027, 49.311425], // starting position [lng, lat]
      zoom: 5, // starting zoom
      transformRequest: transformRequest,
    });
// Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());

    $(document).ready(function () {
      $.ajax({
        type: "GET",
        url: 'https://docs.google.com/spreadsheets/d/1zjgT0RlqLQdhRCDenXWpLicbfOOKwMf-g27WsICOLzg/gviz/tq?tqx=out:csv&sheet=Sheet1', // Original CSV export link
        dataType: "text",
        success: function (csvData) {
          makeGeoJSON(csvData);
        },
      });

      $.ajax({
        type: "GET",
        url: 'https://docs.google.com/spreadsheets/d/1FABRd7joaxYRnU812muFqOtXbq9cw7OPsm_olFpPodE/gviz/tq?tqx=out:csv&sheet=Sheet1', // Another CSV export link
        dataType: "text",
        success: function (csvData) {
          makeGeoJSONDuplicate(csvData);
        },
      });

      function makeGeoJSON(csvData) {
        csv2geojson.csv2geojson(csvData, {
          latfield: 'Latitude',
          lonfield: 'Longitude',
          delimiter: ',',
        }, function (err, data) {
        map.on('load', function () {
        map.addSource('csvData', {
        type: 'geojson',
        data: data,
      });
          
            map.addLayer({
              id: 'csvData',
              type: 'circle',
              source: 'csvData',
              paint:  {
    'circle-radius': [
      'interpolate',
      ['linear'],
      ['zoom'],
      2, 2, // initial radius of 0
      8, 5 // radius of 5 at zoom level 5 and above
    ],
                'circle-color': 'white',
                'circle-stroke-width': 7,
                'circle-stroke-color': 'rgba(0, 0, 0, 0)'
              }
            });

            map.on('click', 'csvData', function (e) {
              var coordinates = e.features[0].geometry.coordinates.slice();
              var description =
                `<h3>` + e.features[0].properties.MarkerID + `</h3>` +
                `<h4>` + `<b>` + `Coordinates: ` + `</b>` + e.features[0].properties.Coordinates + `</h4>` +
                `<h4>` + `<b>` + `Cruising Zone: ` + `</b>` + e.features[0].properties.Challenge_Zone + `</h4>`;

              while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
              }

              new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(description)
                .addTo(map);
            });

            map.on('mouseenter', 'csvData', function () {
              map.getCanvas().style.cursor = 'pointer';
            });

            map.on('mouseleave', 'csvData', function () {
              map.getCanvas().style.cursor = '';
            });

            var bbox = turf.bbox(data);
            map.fitBounds(bbox, { padding: 50 });
          });
        });
      }

function makeGeoJSONDuplicate(csvData) {
  csv2geojson.csv2geojson(csvData, {
    latfield: 'Latitude',
    lonfield: 'Longitude',
    delimiter: ',',
  }, function (err, data) {
    map.on('load', function () {
      map.addSource('csvDataDuplicate', {
        type: 'geojson',
        data: data,
      });

      var courses = getUniqueValues(data.features, 'Course');
      var courseColors = {};

      courses.forEach(function (course) {
        var color = getRandomColor();
        courseColors[course] = color;

        var lineFeatures = getLineFeatures(data.features, 'Course', course);

        map.addSource('lineData-' + course, {
          type: 'geojson',
          data: lineFeatures,
        });

        map.addLayer({
          id: 'lines-' + course,
          type: 'line',
          source: 'lineData-' + course,
          paint: {
            'line-color': color,
            'line-width': 2,
          },
        });
      });

      map.addLayer({
        id: 'points',
        type: 'circle',
        source: 'csvDataDuplicate',
        paint: {
          'circle-radius': [
              'interpolate',
              ['linear'],
              ['zoom'],
              1, 1, // initial radius of 0
              8, 5 // radius of 5 at zoom level 5 and above
            ],
          'circle-color': ['get', ['to-string', ['get', 'Course']], ['literal', courseColors]],
        'circle-stroke-width': 7,
                'circle-stroke-color': 'rgba(0, 0, 0, 0)'
        },
      });

      map.on('click', 'points', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var properties = e.features[0].properties;

        var description = `<h3>` + e.features[0].properties.MarkerID + `</h3>` + `<h4>` + `<b>` + `Coordinates: ` + `</b>` + e.features[0].properties.Coordinates + `</h4>` + `<h4>` + `<b>` + `Type of point: ` + `</b>` + e.features[0].properties.Point + `<h4>` + `<b>` + `Type of race: ` + `</b>` + e.features[0].properties.Type + `</h4>` + `<h4>` + `<b>` + `Reference: ` + `</b>` + e.features[0].properties.Reference + `</h4>` + `<h4>` + `<b>` + `Race course nÂ° ` + `</b>` + e.features[0].properties.Course + `<h4>` + `<b>` + `Challenge: ` + `</b>` + e.features[0].properties.Challenge + `</h4>`;

        new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setHTML(description)
          .addTo(map);
      });

      map.on('mouseenter', 'points', function () {
        map.getCanvas().style.cursor = 'pointer';
      });

      map.on('mouseleave', 'points', function () {
        map.getCanvas().style.cursor = '';
      });

      var bbox = turf.bbox(data);
      map.fitBounds(bbox, { padding: 50 });
    });
  });
}

      function getUniqueValues(features, property) {
        var values = [];

        features.forEach(function (feature) {
          var value = feature.properties[property];

          if (values.indexOf(value) === -1) {
            values.push(value);
          }
        });

        return values;
      }

      function getLineFeatures(features, property, value) {
        var lineFeatures = [];
        var lineStringCoordinates = [];

        features.forEach(function (feature) {
          if (feature.properties[property] === value) {
            var coordinates = feature.geometry.coordinates;

            if (coordinates && coordinates.length === 2) {
              lineStringCoordinates.push(coordinates);
            }
          }
        });

        if (lineStringCoordinates.length > 1) {
          var lineString = turf.lineString(lineStringCoordinates);
          lineFeatures.push(lineString);
        }

        return turf.featureCollection(lineFeatures);
      }

function getRandomColor() {
  var red = Math.floor(Math.random() * 128) + 128; // Generate random value between 128 and 255 for red component
  var green = Math.floor(Math.random() * 128); // Generate random value between 0 and 127 for green component
  var blue = Math.floor(Math.random() * 128); // Generate random value between 0 and 127 for blue component

  var color = '#' + red.toString(16).padStart(2, '0') + green.toString(16).padStart(2, '0') + blue.toString(16).padStart(2, '0');

  return color;
}

    });
